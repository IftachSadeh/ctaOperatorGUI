# define local variables, accessed by %(varName)s
[DEFAULT]
appName=ctaGuiFront
logLvl_root=INFO
#logLvl_root=DEBUG
logLvl_guni=INFO
logLvl_sqla=WARNING
logLvl_pyramidACS=DEBUG

[app:main]
# the prefix may be the name of the package, or any other non-empty string
app_prefix               = cta
# app_prefix               = startup_gui
# app_prefix               = %(appName)s
# north/souh versions of the gui
#ns_type                  = N
#ns_type                  = S
# flag to turn panel-syncronization on/off
allow_panel_sync         = 1
#%(appName)s
# the name MUST be the name of the package - do not change this!
app_name                 = %(appName)s
paste.app_factory        = %(appName)s:main
# session.type             = file
# session.data_dir         = /tmp/%(appName)s/data/sessions/data
# session.lock_dir         = /tmp/%(appName)s/data/sessions/lock
sqlalchemy.url           = sqlite:///%(here)s/%(appName)s.db
pyramid.reload_templates = true
#aaa = %(here)s


[server:main]
use          = egg:gunicorn#main
host         = 0.0.0.0
# host         = 127.0.0.1
port         = 8080
# port         = 8090
# only use a single worker, as otherwise there will be a problem with the threads and the panle sync will not work properly
workers      = 1
worker_class = socketio.sgunicorn.GeventSocketIOWorker
#logconfig = %(here)s/logs/%(appName)s.log
#certfile     = ./ssl/server.crt
#keyfile      = ./ssl/server.key
#ssl_version  = 3
# change the default timeout from 30 seconds to 10 minutes - see http://docs.gunicorn.org/en/stable/settings.html
# this is relevant for a cpu task which can lock up a greenlet for a long time - passing the timeout restarts the worker
timeout = 600


# [server:main]
# use = egg:gevent-socketio#paster
# transports = websocket, xhr-multipart, xhr-polling
# policy_server = True
# host = 127.0.0.1
# port = 8082
# # change the default timeout from 30 seconds to 10 minutes - see http://docs.gunicorn.org/en/stable/settings.html
# # this is relevant for a cpu task which can lock up a greenlet for a long time - passing the timeout restarts the worker
# timeout = 600


[loggers]
keys = root, socketio, guni, sqla, pyramidACS

[handlers]
keys = console, filelog_root, filelog_guni, filelog_sqla, filelog_pyramidACS

[formatters]
keys = generic_0, generic_1, simple

[logger_root]
# write the log to both the console and the file defined in handler_filelog
handlers = console, filelog_root
level    = %(logLvl_root)s

[logger_socketio]
# write the log to both the console and the file defined in handler_filelog
handlers = filelog_guni
level    = %(logLvl_guni)s
qualname = socketio
propagate = 0

[logger_pyramidACS]
# write the log to both the console and the file defined in handler_filelog
handlers = filelog_pyramidACS
level    = %(logLvl_pyramidACS)s
qualname = pyramidACS
propagate = 1

[logger_guni]
handlers  = filelog_guni
level     = %(logLvl_guni)s
qualname  = gunicorn
propagate = 0

[logger_sqla]
handlers  = filelog_sqla
level     = %(logLvl_sqla)s
qualname  = sqlalchemy.engine
propagate = 0

[handler_console]
class     = StreamHandler
args      = (sys.stderr,)
level     = NOTSET
formatter = generic_0

[handler_filelog_root]
# # a single log file:
#  class = FileHandler
#  args = ('%(here)s/logs/%(appName)s.log','a')
# a limited number of rotating log files with a maximum size each:
class     = handlers.RotatingFileHandler
args      = ('%(here)s/logs/%(appName)s.log', 'a', 5*1024*1024, 3, 'utf-8')
level     = %(logLvl_root)s
formatter = generic_0

[handler_filelog_guni]
class     = handlers.RotatingFileHandler
args      = ('%(here)s/logs/%(appName)s_guni.log', 'a', 5*1024*1024, 3, 'utf-8')
level     = %(logLvl_guni)s
formatter = generic_1

[handler_filelog_sqla]
class     = handlers.RotatingFileHandler
args      = ('%(here)s/logs/%(appName)s_sqlalchemy.log', 'a', 5*1024*1024, 3, 'utf-8')
level     = %(logLvl_sqla)s
formatter = generic_1

[handler_filelog_pyramidACS]
class     = handlers.RotatingFileHandler
args      = ('%(here)s/logs/%(appName)s_pyramidACS.log', 'a', 5*1024*1024, 3, 'utf-8')
level     = %(logLvl_pyramidACS)s
formatter = generic_1

[formatter_generic_0]
#format  = [%(asctime)s - %(name)-25.25s - %(levelname)-5.5s] %(message)s
#format  = [%(asctime)s %(levelname)-5.5s] %(message)s [%(name)s]
format  = [%(asctime)s %(levelname)-5.5s] %(message)s
datefmt = %d/%m, %H:%M:%S
#format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

[formatter_generic_1]
format  = [%(name)s - %(asctime)s %(levelname)-5.5s] %(message)s
datefmt = %d/%m, %H:%M:%S

[formatter_simple]
format  = -- %(message)s



